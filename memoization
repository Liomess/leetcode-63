class Solution:
    def uniquePathsWithObstacles(self, obstacleGrid: List[List[int]]) -> int:
        def fun(self,arr,i,j,m,n,dp):
            if arr[i][j]==1:
                dp[i][j]=0
                return dp[i][j]
            if i==m-1 and j==n-1:
                dp[i][j]=1
                return dp[i][j]
            if dp[i][j]!=-1:
                return dp[i][j]
            down,right=0,0
            if i+1<m and arr[i+1][j]!=1:
                down=fun(self,arr,i+1,j,m,n,dp)
            if j+1<n and arr[i][j+1]!=1:
                right=fun(self,arr,i,j+1,m,n,dp)
            dp[i][j]=down+right
            return dp[i][j]
        m=len(obstacleGrid)
        n=len(obstacleGrid[0])
        dp=[[-1 for i in range(n+1)]for j in range(m+1)]
        return fun(self,obstacleGrid,0,0,m,n,dp)
